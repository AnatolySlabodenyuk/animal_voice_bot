import aiohttp
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards.base_kb import base_kb
from keyboards.voice_inline_kb import create_voice_category_inline_kb, \
    VoiceTypesCallbackFactory, create_voice_names_inline_kb, VoiceNamesCallbackFactory
from lexicon.base_commands_enum import BaseCommandsEnum
from lexicon.buttons_enum import ButtonsEnum
from database.database import get_file_name_from_table, get_audio_file_id_from_table, increment_user_request_count
from bs4 import BeautifulSoup

from lexicon.voice_types_enum import VoiceCategoryEnum

router = Router()


class SearchInNetState(StatesGroup):
    waiting_for_key_word = State()


@router.message(CommandStart())
async def process_start_command(message: Message):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
    """
    if message.from_user:
        await increment_user_request_count(message.from_user.id, message.from_user.username or "")
    await message.answer(
        text=BaseCommandsEnum.START.value,
        reply_markup=base_kb
    )


@router.message(F.text == ButtonsEnum.RESTART_BUTTON.value)
async def process_restart_button(message: Message):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É restart_button
    """
    if message.from_user:
        await increment_user_request_count(message.from_user.id, message.from_user.username or "")
    await message.answer(
        text=BaseCommandsEnum.START.value,
        reply_markup=base_kb
    )


@router.message(Command(commands="help"))
async def process_help_command(message: Message):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
    """
    if message.from_user:
        await increment_user_request_count(message.from_user.id, message.from_user.username or "")
    await message.answer(
        text=BaseCommandsEnum.HELP.value,
        reply_markup=base_kb
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É help_button
@router.message(F.text == ButtonsEnum.HELP_BUTTON.value)
async def process_help_button(message: Message):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É help_button
    """
    if message.from_user:
        await increment_user_request_count(message.from_user.id, message.from_user.username or "")
    await message.answer(
        text=BaseCommandsEnum.HELP.value,
        reply_markup=base_kb
    )


@router.message(F.text == ButtonsEnum.VOICE_CATEGORY_CHOOSE_BUTTON.value)
async def process_voice_category_choose_button(message: Message):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    """
    if message.from_user:
        await increment_user_request_count(message.from_user.id, message.from_user.username or "")
    await message.answer(
        text=BaseCommandsEnum.CHOSE_CATEGORY.value,
        reply_markup=await create_voice_category_inline_kb()
    )


@router.callback_query(VoiceTypesCallbackFactory.filter())
async def inline_products_button_press(
        callback: CallbackQuery,
        callback_data: VoiceTypesCallbackFactory
):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    if callback.from_user:
        await increment_user_request_count(callback.from_user.id, callback.from_user.username or "")
    if callback_data.voice_type == VoiceCategoryEnum.animals.value:
        if callback.message:
            await callback.message.answer(
                text=BaseCommandsEnum.CHOSE_ANIMAL.value,
                reply_markup=await create_voice_names_inline_kb(
                    voice_names_list=await get_file_name_from_table(category=VoiceCategoryEnum.animals.value))
            )
        await callback.answer()

    elif callback_data.voice_type == VoiceCategoryEnum.transport.value:
        if callback.message:
            await callback.message.answer(
                text=BaseCommandsEnum.CHOSE_TRANSPORT.value,
                reply_markup=await create_voice_names_inline_kb(
                    voice_names_list=await get_file_name_from_table(category=VoiceCategoryEnum.transport.value))
            )
        await callback.answer()

    elif callback_data.voice_type == VoiceCategoryEnum.objects.value:
        if callback.message:
            await callback.message.answer(
                text=BaseCommandsEnum.CHOSE_OBJECT.value,
                reply_markup=await create_voice_names_inline_kb(
                    voice_names_list=await get_file_name_from_table(category=VoiceCategoryEnum.objects.value))
            )
        await callback.answer()

    else:
        if callback.message:
            await callback.message.answer(
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
            )
        await callback.answer()


async def get_audio_file(callback: CallbackQuery, voice_name: str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏
    """
    file_id = await get_audio_file_id_from_table(voice_name)
    await callback.answer(f"–¢–∞–∫ –∑–≤—É—á–∏—Ç {voice_name}")
    if callback.message and file_id:
        await callback.message.answer_audio(audio=file_id)


@router.callback_query(VoiceNamesCallbackFactory.filter())
async def process_voice_button_press(
        callback: CallbackQuery,
        callback_data: VoiceNamesCallbackFactory
):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –ª—é–±–æ–π –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ callback_data
    """
    if callback.from_user:
        await increment_user_request_count(callback.from_user.id, callback.from_user.username or "")
    await get_audio_file(
        callback=callback,
        voice_name=callback_data.voice_name,
    )


@router.message(F.text == ButtonsEnum.SEARCH_IN_WEB.value)
async def process_search_in_web_button(message: Message, state: FSMContext):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    """
    if message.from_user:
        await increment_user_request_count(message.from_user.id, message.from_user.username or "")
    await message.answer(text=BaseCommandsEnum.SEARCH_IN_WEB_BUTTON.value)

    await state.set_state(SearchInNetState.waiting_for_key_word)


@router.message(SearchInNetState.waiting_for_key_word)
async def search_audio(message: Message, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏–æ –Ω–∞ Zvukogram.com
    """
    if message.from_user:
        await increment_user_request_count(message.from_user.id, message.from_user.username or "")
    BASE_URL = "https://zvukogram.com/?r=search&s="
    query = (message.text or "").strip()
    await state.update_data(waiting_for_key_word=query)

    search_url = BASE_URL + query

    async with aiohttp.ClientSession() as session:
        async with session.get(search_url, ssl=False) as response:
            if response.status == 200:
                html_content = await response.text()
                soup = BeautifulSoup(html_content, "html.parser")

                # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–∫–æ–≤
                audio_blocks = soup.find_all("div", class_="onetrack accordion")

                if not audio_blocks:
                    await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    return

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤
                for block in audio_blocks[:5]:
                    try:
                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                        title = block.find("div", class_="waveTitle").text.strip()
                        mp3_link = block["data-track"]
                        full_mp3_url = f"https://zvukogram.com{mp3_link}"

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await message.answer_audio(
                            audio=full_mp3_url,
                            caption=f"üéµ {title}"
                        )

                    except Exception as e:
                        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞: {e}")
            else:
                await message.reply(f"–û—à–∏–±–∫–∞ {response.status}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–π—Ç—É.")

    await state.clear()
