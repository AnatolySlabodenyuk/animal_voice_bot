from aiogram import F, Router
from aiogram.client.session import aiohttp
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from keyboards.base_kb import base_kb
from keyboards.admin_kb import admin_kb
from keyboards.inline_kb_new import AnimalsCallbackFactory, create_inline_kb
from lexicon.base_commands_enum import BaseCommandsEnum
from lexicon.buttons_enum import ButtonsEnum
from database.database import get_file_id_from_table, add_audio_to_table, get_button_ids, \
    get_file_name_from_table
from bs4 import BeautifulSoup

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router = Router()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(
        text=BaseCommandsEnum.START.value,
        reply_markup=base_kb
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É restart_button
@router.message(F.text == ButtonsEnum.RESTART_BUTTON.value)
async def process_restart_button(message: Message):
    await message.answer(
        text=BaseCommandsEnum.START.value,
        reply_markup=base_kb
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@router.message(Command(commands="help"))
async def process_help_command(message: Message):
    await message.answer(
        text=BaseCommandsEnum.HELP.value,
        reply_markup=base_kb
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É help_button
@router.message(F.text == ButtonsEnum.HELP_BUTTON.value)
async def process_help_button(message: Message):
    await message.answer(
        text=BaseCommandsEnum.HELP.value,
        reply_markup=base_kb
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ
@router.message(F.text == ButtonsEnum.ANIMAL_CHOOSE_BUTTON.value)
async def process_animal_choose_button(message: Message):
    button_ids = await get_button_ids()
    inline_kb = await create_inline_kb(width=1, button_ids=button_ids)
    await message.answer(
        text=BaseCommandsEnum.ANIMAL_CHOOSE_BUTTON.value,
        reply_markup=inline_kb
    )


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏
async def process_button_press(callback: CallbackQuery, animal_id: int, animal_name: str):
    file_id = await get_file_id_from_table(animal_id)
    await callback.answer(f"–¢–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç –ú–∏—Å—Ç–µ—Ä {animal_name}")
    await callback.message.answer_audio(audio=file_id)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –ª—é–±–æ–π –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ callback_data
@router.callback_query(AnimalsCallbackFactory.filter())
async def process_animal_press(
        callback: CallbackQuery,
        callback_data: AnimalsCallbackFactory
):
    await process_button_press(
        callback=callback,
        animal_id=callback_data.button_id,
        animal_name=await get_file_name_from_table(callback_data.button_id),
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
@router.message(F.text == ButtonsEnum.SEARCH_IN_WEB.value)
async def process_search_in_web_button(message: Message):
    await message.answer(text=BaseCommandsEnum.SEARCH_IN_WEB_BUTTON.value)


@router.message(
    # F.text == "–ü–æ–µ–∑–¥"
)
async def search_audio(message: Message):
    BASE_URL = "https://zvukogram.com/?r=search&s="
    query = message.text.strip()
    search_url = BASE_URL + query

    async with aiohttp.ClientSession() as session:
        async with session.get(search_url, ssl=False) as response:
            if response.status == 200:
                html_content = await response.text()
                soup = BeautifulSoup(html_content, "html.parser")

                # –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫–∏ —Å —Ç—Ä–µ–∫–∞–º–∏
                audio_blocks = soup.find_all(
                    "div", class_="onetrack accordion")

                if not audio_blocks:
                    await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    return

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —Ç—Ä–µ–∫–æ–≤
                for block in audio_blocks[:3]:
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        title = block.find(
                            "div", class_="waveTitle").text.strip()
                        mp3_link = block.find(
                            "a", class_="dwdButtn", text="mp3")["href"]

                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
                        full_mp3_url = "https://zvukogram.com" + mp3_link

                        await message.answer_audio(
                            audio=full_mp3_url,
                            caption=f"üéµ {title}"
                        )

                    except Exception as e:
                        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞: {e}")
            else:
                await message.reply(f"–û—à–∏–±–∫–∞ {response.status}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–π—Ç—É.")
